#+TITLE:  Joao Azevedo's Emacs Initialization File
#+AUTHOR: Joao Azevedo
#+EMAIL:  joao.c.azevedo@gmail.com
#+DATE:   2015-06-12 Fri

  This file is my Emacs initialization file. It's written in [[http://orgmode.org/][org-mode]] using
  [[http://orgmode.org/worg/org-contrib/babel/][org-babel]]. The idea behind using org-mode (and org-babel) is to keep it both
  documented and organized. It is currently built as a single =.org= file, but I
  aim to eventually make it more modular. This configuration reflects my
  personal preferences when using Emacs.

  I use Emacs primarily on Mac OS X, using the Emacs mac port [[http://www.math.s.chiba-u.ac.jp/~mituharu/emacs-mac.git/][from Yamamoto
  Mitsuharu]], which I usually install and update using [[http://brew.sh/][Homebrew]] and [[https://github.com/railwaycat/homebrew-emacsmacport][this
  formulae]].

  The latest Emacs version that I've run this configuration with is =24.5.1=.

** Table of Contents                                                  :TOC_3:
     - [[#core][Core]]
         - [[#global-variables][Global Variables]]
     - [[#packages][Packages]]
     - [[#ui][UI]]
     - [[#editor][Editor]]
     - [[#version-control][Version Control]]
     - [[#global-key-bindings][Global Key Bindings]]
     - [[#text][Text]]
         - [[#org][Org]]

** Core

   The following options are relevant throughout the whole config and relate to
   core settings for Emacs.

   The =load-prefer-newer= option was introduced in Emacs 24.4 and allows one to
   specify how the =load= function chooses the files to load. By default its
   value is =nil=, which means that, in the presence of both an =.el= and =.elc=
   file with the same name, the =load= function will always prefer the =.elc=. I
   want to avoid loading outdated =.elc= files, so this option is set to =t=.

#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC

   By default, garbage collection happens every 0.76MB of allocated data. This
   sets it to happen on each 50MB.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 50000000)
#+END_SRC

   The following produces a warning when opening files bigger than 100MB.

#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold 100000000)
#+END_SRC

   Add a function to rename the buffer and file it is currently visiting. Thanks
   to Bozhidar Batsov's [[https://github.com/bbatsov/prelude][prelude]] for this function.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/rename-buffer-and-file ()
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (rename-buffer (read-from-minibuffer "New name: " (buffer-name)))
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC

   Add a function to kill the current buffer and delete the file it is
   visiting. Thanks to Bozhidar Batsov's [[https://github.com/bbatsov/prelude][prelude]] for this function.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/delete-file-and-buffer ()
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (when (y-or-n-p (format "Are you sure you want to delete %s? " filename))
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
#+END_SRC

   Add a function to open a file as root, and hook it to the
   =find-file-hook=. Thanks to Bozhidar Batsov's [[https://github.com/bbatsov/prelude][prelude]] for this function.

#+BEGIN_SRC emacs-lisp
  (require 'tramp)

  (defun jcazevedo/file-owned-by-user-p (filename)
    (equal (nth 2 (file-attributes filename 'integer))
           (user-uid)))

  (defun jcazevedo/find-alternate-file-as-root (filename)
    (find-alternate-file (concat "/sudo:root@localhost:" filename)))

  (defun jcazevedo/reopen-as-root ()
    (unless (or (tramp-tramp-file-p buffer-file-name)
                (equal major-mode 'dired-mode)
                (not (file-exists-p (file-name-directory buffer-file-name)))
                (file-writable-p buffer-file-name)
                (jcazevedo/file-owned-by-user-p buffer-file-name))
      (jcazevedo/find-alternate-file-as-root buffer-file-name)))

  (add-hook 'find-file-hook 'jcazevedo/reopen-as-root)
#+END_SRC

*** Global Variables

    The following block defines variables that are used throughout the whole
    initialization file. The variables are usually prefixed with =jcazevedo/=.

#+BEGIN_SRC emacs-lisp
  (defvar jcazevedo/config-dir (file-name-directory load-file-name))
  (defvar jcazevedo/elpa-dir (expand-file-name "elpa" jcazevedo/config-dir))
#+END_SRC

    The following variables are defined:

| Variable Name          | Variable Description                                    |
|------------------------+---------------------------------------------------------|
| =jcazevedo/config-dir= | The directory where the initialization file is.         |
| =jcazevedo/elpa-dir=   | The directory where packages installed from elpa go to. |

** Packages

   The following options are related to the installation of packages required by
   this config.

   =package.el= is the built-in package manager in Emacs 24.

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

   Update the package archives to include the default package archive (=gnu=),
   as well as =marmalde= and =melpa=.

#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "https://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))
#+END_SRC

   Set the directory for the contents of packages downloaded from the Emacs Lisp
   Package Archive (elpa).

#+BEGIN_SRC emacs-lip
  (setq package-user-dir jcazevedo/elpa-dir)
#+END_SRC

   Initialize installed packages and refresh the contents of the package index,
   so that we always have the most recent version of the package list.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (package-refresh-contents)
#+END_SRC

   The following methods allow one to define packages to be installed. The
   =jcazevedo/require-package= method verifies that the package is not yet
   installed before trying to install it.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/require-package (package)
    (unless (package-installed-p package)
      (package-install package)))

  (defun jcazevedo/require-packages (packages)
    (mapc #'jcazevedo/require-package packages))
#+END_SRC

   [[https://github.com/Malabarba/paradox/][Paradox]] modernizes Emacs' package menu, providing GitHub integration, better
   mode-line information and asynchronous upgrading. The following sets the
   =list-packages= command to use =paradox-list-packages= instead. No value is
   set for =paradox-github-token=, since I don't want to star repositories from
   the package list.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(paradox))
  (setq paradox-github-token t)
  (fset 'list-packages 'paradox-list-packages)
#+END_SRC

** UI

   The following options are related to the user interface of Emacs.

   Disable the toolbar, which isn't auto-loaded when in a tty.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

   Disable the menu bar.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

   Disable the blinking cursor. It is kind of an annoyance.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

   Disable the startup screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

   Set the number of lines of margin at the top and bottom of a window to 0,
   avoiding recentering the window whenever the cursor gets close to the limits
   of the window.

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0)
#+END_SRC

   Avoid recentering the point, scrolling just enough text to bring point into
   view, even if you move far away.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100000)
#+END_SRC

   Make the point always keep its screen position on scroll commands.

#+BEGIN_SRC emacs-lisp
  (setq scroll-preserve-screen-position 1)
#+END_SRC

   Enable =line-number-mode= globally, toggling line number display in the mode
   line.

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
#+END_SRC

   Enable =column-number-mode= globally, toggling column number display in the
   mode line.

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

   Enable =size-indication-mode= globally, toggling buffer size display in the
   mode line.

#+BEGIN_SRC emacs-lisp
  (size-indication-mode t)
#+END_SRC

   Enable y/n answers, since most commands require you to explicitly write =yes=
   or =no=, and that's cumbersome.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

   Use the [[https://github.com/bbatsov/zenburn-emacs][zenburn-theme]]. It was originally designed for vim by Jani Nurminen,
   and later ported to Emacs by Bozhidar Batsov.

#+BEGIN_QUOTE
It's easy for your eyes and designed to keep you in the zone for long
programming sessions.\\
-- [[http://kippura.org/zenburnpage/][The Official Zenburn Page]]
#+END_QUOTE

   It looks like this:

   [[http://kippura.org/i/zenburn.png]]

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(zenburn-theme))
  (load-theme 'zenburn t)
#+END_SRC

   Add a function to have a proper fullscreen. I like it better in Mac OS X than
   its native fullscreen support, which opens in a separate desktop. It should
   also work under an X server.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/fullscreen ()
    (interactive)
    (cond
     ((eq system-type 'darwin)
      (set-frame-parameter
       nil 'fullscreen
       (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))
     ((eq window-system 'x)
      (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                             '(2 "_NET_WM_STATE_FULLSCREEN" 0)))
      (error "Unable to toggle fullscreen")))
#+END_SRC

** Editor

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 8)
  (setq require-final-newline t)
  (delete-selection-mode t)
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t)
  (global-auto-revert-mode t)
  (global-hl-line-mode +1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/enable-whitespace ()
    (add-hook 'before-save-hook 'whitespace-cleanup)
    (whitespace-mode +1))

  (require 'whitespace)
  (setq whitespace-line-column 80)
  (setq-default fill-column 80)
  (setq whitespace-style '(face tabs empty trailing))

  (jcazevedo/require-packages '(fill-column-indicator))
#+END_SRC

** Version Control

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(magit))
  (setq magit-last-seen-setup-instructions "1.4.0")
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** Global Key Bindings

   The following defines extra global key bindings.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f11>") 'jcazevedo/fullscreen)
  (global-set-key (kbd "C-c r") 'jcazevedo/rename-buffer-and-file)
  (global-set-key (kbd "C-c D") 'jcazevedo/delete-file-and-buffer)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

   The following table lists all relevant global key bindings when using this
   configuration, along with their description.

| Key Binding                        | Description                                                                                                        |
| @@html:<kbd>@@C-c r@@html:</kbd>@@ | Renames the current buffer and, if the buffer is visiting a file, rename the file as well.                         |
| @@html:<kbd>@@C-c D@@html:</kbd>@@ | Kills the current buffer and deletes the file it is visiting.                                                      |
| @@html:<kbd>@@C-x g@@html:</kbd>@@ | Opens a Magit status buffer for the Git repository contaning the file or directory the current buffer is visiting. |

** Text

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'fci-mode)
  (add-hook 'text-mode-hook 'jcazevedo/enable-whitespace)
#+END_SRC

*** Org

#+BEGIN_SRC emacs-lisp
(jcazevedo/require-packages '(toc-org))

(require 'toc-org)
(add-hook 'org-mode-hook 'toc-org-enable)
#+END_SRC
