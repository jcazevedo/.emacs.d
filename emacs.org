#+TITLE:  Joao Azevedo's Emacs Initialization File
#+AUTHOR: Joao Azevedo
#+EMAIL:  joao.c.azevedo@gmail.com
#+DATE:   2015-06-23 Tue

  This file is my Emacs initialization file. It's written in [[http://orgmode.org/][org-mode]] using
  [[http://orgmode.org/worg/org-contrib/babel/][org-babel]]. The idea behind using org-mode (and org-babel) is to keep it both
  documented and organized. It is currently built as a single =.org= file, but I
  aim to eventually make it more modular. This configuration reflects my
  personal preferences when using Emacs.

  I use Emacs primarily on Mac OS X, using the Emacs mac port [[http://www.math.s.chiba-u.ac.jp/~mituharu/emacs-mac.git/][from Yamamoto
  Mitsuharu]], which I usually install and update using [[http://brew.sh/][Homebrew]] and [[https://github.com/railwaycat/homebrew-emacsmacport][this
  formulae]].

  The latest Emacs version that I've run this configuration with is =24.5.1=.

** Table of Contents                                                  :TOC_3:
     - [[#core][Core]]
         - [[#global-variables][Global Variables]]
     - [[#packages][Packages]]
     - [[#ui][UI]]
     - [[#editor][Editor]]
         - [[#projects][Projects]]
         - [[#selection][Selection]]
     - [[#version-control][Version Control]]
     - [[#text][Text]]
         - [[#markdown][Markdown]]
         - [[#org][Org]]
     - [[#programming][Programming]]
         - [[#html][HTML]]
         - [[#javascript][JavaScript]]
         - [[#json][JSON]]
         - [[#php][PHP]]
         - [[#scala][Scala]]
         - [[#yaml][YAML]]
     - [[#global-key-bindings][Global Key Bindings]]

** Core

   The following options are relevant throughout the whole config and relate to
   core settings for Emacs.

   The =load-prefer-newer= option was introduced in Emacs 24.4 and allows one to
   specify how the =load= function chooses the files to load. By default its
   value is =nil=, which means that, in the presence of both an =.el= and =.elc=
   file with the same name, the =load= function will always prefer the =.elc=. I
   want to avoid loading outdated =.elc= files, so this option is set to =t=.

#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC

   By default, garbage collection happens every 0.76MB of allocated data. This
   sets it to happen on each 50MB.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 50000000)
#+END_SRC

   The following produces a warning when opening files bigger than 100MB.

#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold 100000000)
#+END_SRC

   Add a function to rename the buffer and file it is currently visiting. Thanks
   to Bozhidar Batsov's [[https://github.com/bbatsov/prelude][prelude]] for this function.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/rename-buffer-and-file ()
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (rename-buffer (read-from-minibuffer "New name: " (buffer-name)))
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC

   Add a function to kill the current buffer and delete the file it is
   visiting. Thanks to Bozhidar Batsov's [[https://github.com/bbatsov/prelude][prelude]] for this function.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/delete-file-and-buffer ()
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (when (y-or-n-p (format "Are you sure you want to delete %s? " filename))
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
#+END_SRC

   Add a function to open a file as root, and hook it to the
   =find-file-hook=. Thanks to Bozhidar Batsov's [[https://github.com/bbatsov/prelude][prelude]] for this function.

#+BEGIN_SRC emacs-lisp
  (require 'tramp)

  (defun jcazevedo/file-owned-by-user-p (filename)
    (equal (nth 2 (file-attributes filename 'integer))
           (user-uid)))

  (defun jcazevedo/find-alternate-file-as-root (filename)
    (find-alternate-file (concat "/sudo:root@localhost:" filename)))

  (defun jcazevedo/reopen-as-root ()
    (unless (or (tramp-tramp-file-p buffer-file-name)
                (equal major-mode 'dired-mode)
                (not (file-exists-p (file-name-directory buffer-file-name)))
                (file-writable-p buffer-file-name)
                (jcazevedo/file-owned-by-user-p buffer-file-name))
      (jcazevedo/find-alternate-file-as-root buffer-file-name)))

  (add-hook 'find-file-hook 'jcazevedo/reopen-as-root)
#+END_SRC

*** Global Variables

    The following block defines variables that are used throughout the whole
    initialization file. The variables are usually prefixed with =jcazevedo/=.

#+BEGIN_SRC emacs-lisp
  (defvar jcazevedo/config-dir (file-name-directory load-file-name))
  (defvar jcazevedo/elpa-dir (expand-file-name "elpa" jcazevedo/config-dir))
  (defvar jcazevedo/savefile-dir (expand-file-name "savefile" jcazevedo/config-dir))
#+END_SRC

    The following variables are defined:

| Variable Name            | Variable Description                                                           |
|--------------------------+--------------------------------------------------------------------------------|
| =jcazevedo/config-dir=   | The directory where the initialization file is.                                |
| =jcazevedo/elpa-dir=     | The directory where packages installed from elpa go to.                        |
| =jcazevedo/savefile-dir= | The directory where all automatically generated save/history files are stored. |

** Packages

   The following options are related to the installation of packages required by
   this config.

   =package.el= is the built-in package manager in Emacs 24.

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

   Add =melpa= to the package archives.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC

   Set the directory for the contents of packages downloaded from the Emacs Lisp
   Package Archive (elpa).

#+BEGIN_SRC emacs-lip
  (setq package-user-dir jcazevedo/elpa-dir)
#+END_SRC

   Initialize installed packages and refresh the contents of the package index,
   so that we always have the most recent version of the package list.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (package-refresh-contents)
#+END_SRC

   The following methods allow one to define packages to be installed. The
   =jcazevedo/require-package= method verifies that the package is not yet
   installed before trying to install it.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/require-package (package)
    (unless (package-installed-p package)
      (package-install package)))

  (defun jcazevedo/require-packages (packages)
    (mapc #'jcazevedo/require-package packages))
#+END_SRC

   [[https://github.com/Malabarba/paradox/][Paradox]] modernizes Emacs' package menu, providing GitHub integration, better
   mode-line information and asynchronous upgrading. =paradox-list-packages=
   uses the =list-packages= command, so I can't replace the latter directly. No
   value is set for =paradox-github-token=, since I don't want to star
   repositories from the package list.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(paradox))
  (setq paradox-github-token t)
#+END_SRC

** UI

   The following options are related to the user interface of Emacs.

   Disable the toolbar, which isn't auto-loaded when in a tty.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

   Disable the menu bar.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

   Disable the blinking cursor. It is kind of an annoyance.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

   Disable the startup screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

   Set the number of lines of margin at the top and bottom of a window to 0,
   avoiding recentering the window whenever the cursor gets close to the limits
   of the window.

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0)
#+END_SRC

   Avoid recentering the point, scrolling just enough text to bring point into
   view, even if you move far away.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100000)
#+END_SRC

   Make the point always keep its screen position on scroll commands.

#+BEGIN_SRC emacs-lisp
  (setq scroll-preserve-screen-position 1)
#+END_SRC

   Enable =line-number-mode= globally, toggling line number display in the mode
   line.

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
#+END_SRC

   Enable =column-number-mode= globally, toggling column number display in the
   mode line.

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

   Enable =size-indication-mode= globally, toggling buffer size display in the
   mode line.

#+BEGIN_SRC emacs-lisp
  (size-indication-mode t)
#+END_SRC

   Hide the scrollbar. With =line-number-mode=, =column-number-mode= and
   =size-indication-mode= we already have a good indication of where we are in a
   buffer.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

   Enable y/n answers, since most commands require you to explicitly write =yes=
   or =no=, and that's cumbersome.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

   Use the [[https://github.com/bbatsov/zenburn-emacs][zenburn-theme]]. It was originally designed for vim by Jani Nurminen,
   and later ported to Emacs by Bozhidar Batsov.

#+BEGIN_QUOTE
It's easy for your eyes and designed to keep you in the zone for long
programming sessions.\\
-- [[http://kippura.org/zenburnpage/][The Official Zenburn Page]]
#+END_QUOTE

   It looks like this:

   [[http://kippura.org/i/zenburn.png]]

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(zenburn-theme))
  (load-theme 'zenburn t)
#+END_SRC

   Add a function to have a proper fullscreen. I like it better in Mac OS X than
   its native fullscreen support, which opens in a separate desktop. It should
   also work under an X server.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/fullscreen ()
    (interactive)
    (cond
     ((eq system-type 'darwin)
      (set-frame-parameter
       nil 'fullscreen
       (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))
     ((eq window-system 'x)
      (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                             '(2 "_NET_WM_STATE_FULLSCREEN" 0)))
      (error "Unable to toggle fullscreen")))
#+END_SRC

   Enable =smart-mode-line=, which is a sexy replacement for the default Emacs
   mode-line.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(smart-mode-line))
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'dark)
  (sml/setup)
#+END_SRC

** Editor

   The following options are related to the editor experience under Emacs.

   Don't use tabs to indent. Modes that handle files that require tabs (such as
   Makefiles) should enable them explicitly.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

   Even though we're not using tabs to indent, we want to keep the correct
   appearence of them, which historically is an 8-character offset.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 8)
#+END_SRC

   Require a newline at the end of a file.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

   Enable =delete-selection-mode= globally, which enables deleting a whole
   selection with a keypress.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

   Store backups, autosave files and undo-tree history in the tmp dir.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t)
#+END_SRC

   Enable =global-auto-revert-mode= globally, which causes buffers to
   automatically revert when underlying files are changed externally. This is
   specially useful under version control (branch switching and stuff) or when
   compilers/linters automatically change a given file.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

   If a line is already indented, setting the value of =tab-always-indent= to
   =complete= makes the =TAB= command try to complete the text at point.

#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC

   Enable =global-hl-line-mode= globally, highlighting the line the cursor is
   at.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode +1)
#+END_SRC

   Uniquify override Emacs' default mechanism for making buffer names unique
   (using numbered suffixes) with a behaviour which uses parts of the file names
   to make the buffer names distinguishable. The =forward= style uses path
   elements in their natural order, using =/= as a separator. Setting
   =uniquify-after-kill-buffer-p= to non-nil rerationalizes the buffer names
   after a buffer has been killed. Buffer names starting with =*= should not be
   uniquified.

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
#+END_SRC

   Saveplace remembers your location in a file when saving files. It is
   activated for all buffers.

#+BEGIN_SRC emacs-lisp
  (require 'saveplace)

  (unless (file-exists-p jcazevedo/savefile-dir)
    (make-directory jcazevedo/savefile-dir))

  (setq save-place-file (expand-file-name "saveplace" jcazevedo/savefile-dir))
  (setq-default save-place t)
#+END_SRC

   Savehist keeps track of the minibuffer history by default. It is also enabled
   for search entries.

#+BEGIN_SRC emacs-lisp
  (require 'savehist)

  (setq savehist-additional-variables '(search-ring regexp-search-ring))
  (setq savehist-autosave-interval 60)
  (setq savehist-file (expand-file-name "savehist" jcazevedo/savefile-dir))

  (savehist-mode +1)
#+END_SRC

   Recentf saves recent files. A maximum number of 500 items are saved. The
   cleanup of recent files at startup is disabled due to potential issues with
   remote files. Files from the savefile dir and the package user dir are
   excluded from the recent files, as well as the commit message files from
   Magit.

#+BEGIN_SRC emacs-lisp
  (require 'recentf)

  (setq recentf-save-file (expand-file-name "recentf" jcazevedo/savefile-dir))
  (setq recentf-max-saved-items 500)
  (setq recentf-max-menu-items 15)
  (setq recentf-auto-cleanup 'never)

  (defun jcazevedo/recentf-exclude-p (file)
    (let ((file-dir (file-truename (file-name-directory file))))
      (-any-p (lambda (dir)
                (string-prefix-p dir file-dir))
              (mapcar 'file-truename (list jcazevedo/savefile-dir package-user-dir)))))

  (add-to-list 'recentf-exclude 'jcazevedo/recentf-exclude-p)
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")

  (recentf-mode +1)
#+END_SRC

   I usually use @@html:<kbd>@@C-x o@@html:</kbd>@@ to switch buffers. However,
   windmove sometimes comes in handy, allowing the usage of shift + arrow keys
   to switch between visible buffers.

#+BEGIN_SRC emacs-lisp
  (require 'windmove)
  (windmove-default-keybindings)
#+END_SRC

   Automatically save buffers which have files associated with them on buffer
   and window switch. This idea was borrowed from Bozhidar Batsov's [[https://github.com/bbatsov/prelude][prelude]].

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/auto-save-command ()
    (when (and buffer-file-name
               (buffer-modified-p (current-buffer))
               (file-writable-p buffer-file-name))
      (save-buffer)))

  (defmacro advise-commands (advice-name commands class &rest body)
    `(progn
       ,@(mapcar
          (lambda (command)
            `(defadvice ,command
                 (,class ,(intern (concat (symbol-name command) "-" advice-name)) activate)
               ,@body))
          commands)))

  (advise-commands "auto-save"
                   (switch-to-buffer
                    other-window
                    windmove-up
                    windmove-down
                    windmove-left
                    windmove-right)
                   before
                   (jcazevedo/auto-save-command))

  (add-hook 'mouse-leave-buffer-hook 'jcazevedo/auto-save-command)
  (add-hook 'focus-out-hook 'jcazevedo/auto-save-command)
#+END_SRC

   Add method to enable =whitespace-mode= and add a hook for cleaning up
   whitespace on buffer save. The default column width for =whitespace-mode= is
   set at 80. Tabs, empty lines and trailing blanks are highlighted.

#+BEGIN_SRC emacs-lisp
  (defun jcazevedo/enable-whitespace ()
    (add-hook 'before-save-hook 'whitespace-cleanup)
    (whitespace-mode +1))

  (require 'whitespace)
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face tabs empty trailing))
#+END_SRC

   Set the default column beyond which automatic line-wrapping should happen
   at 80. Also require the =fill-column-indicator= package, enabling a graphical
   indication through a thin line at the fill column. The mode can be enabled
   through the =fci-mode= command.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (jcazevedo/require-packages '(fill-column-indicator))
#+END_SRC

   The =fill-column-indicator= doesn't play well with =company-mode=. In the
   event of using =company-mode=, the following disables =fci-mode= temporarily
   while a popup is being displayed.

#+BEGIN_SRC emacs-lisp
  (defvar-local company-fci-mode-on-p nil)

  (defun company-turn-off-fci (&rest ignore)
    (when (boundp 'fci-mode)
      (setq company-fci-mode-on-p fci-mode)
      (when fci-mode (fci-mode -1))))

  (defun company-maybe-turn-on-fci (&rest ignore)
    (when company-fci-mode-on-p (fci-mode 1)))

  (add-hook 'company-completion-started-hook 'company-turn-off-fci)
  (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
  (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci)
#+END_SRC

   =volatile-highlights= bring visual feedback to some operations by
   highlighting the portions related to them.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(volatile-highlights))
  (require 'volatile-highlights)
  (volatile-highlights-mode t)
#+END_SRC

   Anzu enhances isearch and query-replace by showing total matches and current
   match position. It is enabled everywhere. =anzu-query-replace= and
   =anzu-query-replace-regexp= provide better alternatives for the native query
   and replace mechanism.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(anzu))
  (require 'anzu)
  (global-anzu-mode)
#+END_SRC

   If editing a shell script, make it executable automatically on save.

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

   Enable =winner-mode=. It allows you to undo and redo changes in window
   configuration with the key commands @@html:<kbd>@@C-c left@@html:</kbd>@@ and
   @@html:<kbd>@@C-c right@@html:</kbd>@@.

#+BEGIN_SRC emacs-lisp
  (winner-mode +1)
#+END_SRC

   =discover-my-major= helps understanding a given major mode, by providing the
   list of key bindings and their meaning.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(discover-my-major))
#+END_SRC

   Enable =smartparens=. Smartparens is a minor mode for Emacs that deals with
   parens pairs and tries to be smart about it. I find it most useful for
   highlighting the correspondent opening/closing pairs, as well as navigating
   between them (@@html:<kbd>@@C-M-f@@html:</kbd>@@ and
   @@html:<kbd>@@C-M-b@@html:</kbd>@@).

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(smartparens))

  (require 'smartparens-config)
  (setq sp-base-key-bindings 'paredit)
  (setq sp-autoskip-closing-pair 'always)
  (setq sp-hybrid-kill-entire-symbol nil)
  (sp-use-paredit-bindings)

  (show-smartparens-global-mode +1)
#+END_SRC

*** Projects

    In order to have the notion of a project inside Emacs, I use [[https://github.com/bbatsov/projectile][projectile]]. It
    allows one to efficiently navigate through files in a project. A project is
    a folder under version control by =git=, =mercurial=, =darcs= or
    =bazaar=. Projects managed by =lein=, =maven=, =sbt=, =scons=, =rebar= or
    =bundler= are also considered. A folder with a =.projectile= file in it is
    also interpreted as a project. Projectile is enabled everywhere.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(projectile))
  (require 'projectile)
  (setq projectile-cache-file (expand-file-name  "projectile.cache" jcazevedo/savefile-dir))
  (projectile-global-mode t)
#+END_SRC

*** Selection

    Use Helm as an incremental completion and selection narrowing framework for
    Emacs.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(helm helm-projectile))

  (require 'helm-config)
  (require 'helm-projectile)
#+END_SRC

    Make Helm auto-resizable according to the number of candidates.

#+BEGIN_SRC emacs-lisp
  (helm-autoresize-mode 1)
#+END_SRC

    Open Helm buffer inside current window.

#+BEGIN_SRC emacs-lisp
  (setq helm-split-window-in-side-p t)
#+END_SRC

    Enable fuzzy matching.

#+BEGIN_SRC emacs-lisp
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-recentf-fuzzy-match t)
#+END_SRC

    Search for library in =require= and =declare-function= sexp.

#+BEGIN_SRC emacs-lisp
  (setq helm-ff-search-library-in-sexp t)
#+END_SRC

    Use recentf for file name history.

#+BEGIN_SRC emacs-lisp
  (setq helm-ff-file-name-history-use-recentf t)
#+END_SRC

    Prevent the cursor from escaping the minibuffer.

#+BEGIN_SRC emacs-lisp
  (setq helm-prevent-escaping-from-minibuffer t)
#+END_SRC

    Use the Helm frontend for describing bindings and the Helm interface to
    =ag=.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(helm-descbinds helm-ag))
#+END_SRC

    Replace some global key bindings to use Helm instead.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-m") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-h f") 'helm-apropos)
  (global-set-key (kbd "C-h r") 'helm-info-emacs)
  (global-set-key (kbd "C-h C-l") 'helm-locate-library)
  (global-set-key (kbd "C-c f") 'helm-recentf)

  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)
#+END_SRC

    Preconfigure Helm for etags.

#+BEGIN_SRC emacs-lisp
  (substitute-key-definition 'find-tag 'helm-etags-select global-map)
#+END_SRC

    Use Helm as projectile's completion system.

#+BEGIN_SRC emacs-lisp
  (setq projectile-completion-system 'helm)
#+END_SRC

    Effectively enable Helm everywhere.

#+BEGIN_SRC emacs-lisp
  (helm-descbinds-mode)
  (helm-mode 1)
  (helm-projectile-on)
#+END_SRC

** Version Control

   I use Git almost exclusively as a version control software. =magit= is a
   great mode to interact with Git. @@html:<kbd>@@C-x g@@html:</kbd>@@ opens a
   magit status buffer for the current project, from which you can operate on
   the repository.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(magit))
#+END_SRC

   Before running Git, Magit by default reverts all unmodified buffers that
   visit files tracked in the current repository. Since version =1.4.0= a
   warning is displayed regarding this. I'm OK with the current behaviour, so
   the following disables repeated displays of the warning.

#+BEGIN_SRC emacs-lisp
  (setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC

   =git-timemachine= allows one to navigate through the history of a
   git-controlled file. I don't have it bound to a specific keybinding, so a
   call to @@html:<kbd>@@M-x git-timemachine@@html:</kbd>@@ enables it.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(git-timemachine))
#+END_SRC

   The following enables Emacs major modes for various Git configuration files,
   such as =.gitattributes=, =.gitconfig= and =.gitignore=.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(gitattributes-mode gitconfig-mode gitignore-mode))
#+END_SRC

   =diff-hl-mode= highlights uncommited changes on the left side of the
   window. The following enables it globally and loads the =diff-hl-dired-mode=
   on =dired=.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(diff-hl))
  (global-diff-hl-mode +1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
#+END_SRC

** Text

   Text mode is a major mode for editing files of text in a human language. This
   section relates to =text-mode= itself, as well as major modes that derive
   from it, and consequently call =text-mode-hook= prior to their own hooks.

   Enable =fci-mode= for text modes, showing a line at the =fill-column= column.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'fci-mode)
#+END_SRC

   Enable =whitespace-mode= for text modes.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'jcazevedo/enable-whitespace)
#+END_SRC

   Enable =visual-line-mode= for text files, turning on word-wrapping.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

*** Markdown

    Markdown is a plain text formatting syntax, used widely as a documentation
    format. The following sets =markdown-mode= up and enables it for =.md= and
    =.markdown= files.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

*** Org

    Org mode is for keeping notes, maintaining TODO lists, planning projects,
    and authoring documents with a fast and effective plain-text system. I also
    Org mode to maintain this initialization file.

    =toc-org= enables automatic generation of a table of contents inside a
    section containing the =:TOC:= tag. I use it mainly to have a neat table of
    contents in this file when visiting it through [[https://github.com/jcazevedo/emacs.d/blob/master/emacs.org][GitHub]].

#+BEGIN_SRC emacs-lisp
(jcazevedo/require-packages '(toc-org))

(require 'toc-org)
(add-hook 'org-mode-hook 'toc-org-enable)
#+END_SRC

    Set the default folder for org files and org agenda files to =~/org=.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
  (setq org-agenda-files (list "~/org"))
#+END_SRC

    Add more org-todo-keywords and customize their colors.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence
                 "TODO(t)"
                 "STARTED(s)"
                 "|"
                 "DONE(d)"
                 "CANCELLED(c)"
                 "MEETING(m)"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("STARTED" :foreground "dodger blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold))))
#+END_SRC

    Enable fast access to todo states.

#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
#+END_SRC

    Define drawers for TODO list items.

#+BEGIN_SRC emacs-lisp
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  (setq org-clock-in-resume t)
  (setq org-clock-into-drawer t)
#+END_SRC

    Log the timestamp a task entered the DONE state.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)
#+END_SRC

** Programming

   This section relates to modes inheriting from =prog-mode=, and that
   consequently call =prog-mode-hook= prior to their own hooks.

   Enable =fci-mode= for programming modes, showing a line at the =fill-column=
   column.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'fci-mode)
#+END_SRC

   Enable =whitespace-mode= for programming modes.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'jcazevedo/enable-whitespace)
#+END_SRC

*** HTML

    I use =web-mode= to deal with HTML and other template files that generate
    HTML. It allows better integration with CSS, JavaScript, and server-side
    code blocks.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(web-mode))
#+END_SRC

    Indent HTML and CSS with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
#+END_SRC

    Associate a bunch of typical template engines with =web-mode=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.blade\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

    Take into account files inside folders that most likely have templates.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist
               '("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode))
#+END_SRC

    Make =web-mode= play nice with smartparens.

#+BEGIN_SRC emacs-lisp
  (setq web-mode-enable-auto-pairing nil)
#+END_SRC

    =web-mode= runs into some strange indentation issues with =fci-mode=
    enabled, so this disables the latter in =web-mode=.

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook 'turn-off-fci-mode)
#+END_SRC

*** JavaScript

    The following defines the settings to deal with JavaScript buffers. I
    currently use =js2-mode= for that.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(js2-mode))
  (require 'js2-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC

*** JSON

    The following defines the settings to deal with JSON buffers.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(json-mode))
#+END_SRC

*** PHP

    The following defines the settings to deal with PHP buffers. I rely on
    =php-mode= exclusively for that.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(php-mode))
#+END_SRC

*** Scala

    The following defines the settings to deal with Scala buffers. I rely on
    =scala-mode2= and =ensime= for all Scala projects.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(scala-mode2 ensime))

  (require 'ensime)
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
#+END_SRC

    By default, =scala-mode='s =fill-paragraph= function doesn't fill ScalaDoc
    parameter lists properly. I changed this to use the same function as
    =java-mode=, and the same values for =paragraph-separate= and
    =paragraph-start= as =java-mode=.

#+BEGIN_SRC emacs-lisp
  (add-hook 'scala-mode-hook (lambda ()
                               (setq scala-indent:use-javadoc-style t)
                               (setq paragraph-separate "[ \t]*\\(//+\\|\\*?\\)[ \t]*$\\|^")
                               (setq paragraph-start "[ \t]*\\(//+\\|\\*?\\)[ \t]*\\(@[a-zA-Z]+\\>\\|$\\)\\|^\f")
                               (setq fill-paragraph-function 'c-fill-paragraph)))
#+END_SRC

*** YAML

    YAML is a simple language that describes data. It doesn't inherit neither
    from =prog-mode= nor =text-mode= so the =whitespace-mode= and =fci-mode=
    hooks need to be set explicitly.

#+BEGIN_SRC emacs-lisp
  (jcazevedo/require-packages '(yaml-mode))
  (add-hook 'yaml-mode-hook 'fci-mode)
  (add-hook 'yaml-mode-hook 'jcazevedo/enable-whitespace)
#+END_SRC

** Global Key Bindings

   The following defines extra global key bindings.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f11>") 'jcazevedo/fullscreen)
  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
  (global-set-key (kbd "C-c D") 'jcazevedo/delete-file-and-buffer)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
  (global-set-key (kbd "C-c r") 'jcazevedo/rename-buffer-and-file)
  (global-set-key (kbd "C-h C-m") 'discover-my-major)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "M-%") 'anzu-query-replace)
#+END_SRC

   The following table lists all relevant global key bindings when using this
   configuration, along with their description.

| Key Binding                          | Description                                                                                                        |
| @@html:<kbd>@@C-M-%@@html:</kbd>@@   | Queries and replace using a regexp in anzu.                                                                        |
| @@html:<kbd>@@C-c D@@html:</kbd>@@   | Kills the current buffer and deletes the file it is visiting.                                                      |
| @@html:<kbd>@@C-c r@@html:</kbd>@@   | Renames the current buffer and, if the buffer is visiting a file, rename the file as well.                         |
| @@html:<kbd>@@C-h C-m@@html:</kbd>@@ | Displays list of keybindings and their meaning for the current major mode.                                         |
| @@html:<kbd>@@C-x g@@html:</kbd>@@   | Opens a Magit status buffer for the Git repository contaning the file or directory the current buffer is visiting. |
| @@html:<kbd>@@M-%@@html:</kbd>@@     | Queries and replace in anzu.                                                                                       |
| @@html:<kbd>@@f11@@html:</kbd>@@     | Toggles fullscreen.                                                                                                |
| @@html:<kbd>@@C-c a@@html:</kbd>@@   | Shows org agenda.                                                                                                  |
| @@html:<kbd>@@C-c b@@html:</kbd>@@   | Switchs between org files                                                                                          |
